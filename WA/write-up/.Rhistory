labels = spawn.lab.0
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_SO_0.png"))
# Log plot
Dev.quants.ggplot.SB0 <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[1])
ggplot(Dev.quants.ggplot.SB0, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[1], ymax = logCI_DQs_RE[1]), fill = NA, color = four.colors[1]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.SB0$Model_name)) +
# scale_y_continuous(limits=ylims.in[3:4])+
coord_cartesian(ylim = ylims.in[3:4]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
scale_colour_manual(
values = four.colors[1],
name = "",
labels = spawn.lab.0
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_SO_0.png"))
}
if (plot.figs[3] == 1) {
# RE plots
Dev.quants.ggplot.SBt <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[2])
ggplot(Dev.quants.ggplot.SBt, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[2], ymax = CI_DQs_RE[2]), fill = NA, color = four.colors[2]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), minor_breaks = NULL, labels = unique(Dev.quants.ggplot.SBt$Model_name)) +
# scale_y_continuous(limits=ylims.in[5:6])+
coord_cartesian(ylim = ylims.in[5:6]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
# panel.grid.minor = element_blank(),
legend.text.align = 0
) +
scale_colour_manual(
values = four.colors[2],
name = "",
labels = spawn.lab.curr
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_SOcurrent.png"))
# Log plots
Dev.quants.ggplot.SBt <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[2])
ggplot(Dev.quants.ggplot.SBt, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[2], ymax = logCI_DQs_RE[2]), fill = NA, color = four.colors[2]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), minor_breaks = NULL, labels = unique(Dev.quants.ggplot.SBt$Model_name)) +
# scale_y_continuous(limits=ylims.in[5:6])+
coord_cartesian(ylim = ylims.in[5:6]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
# panel.grid.minor = element_blank(),
legend.text.align = 0
) +
scale_colour_manual(
values = four.colors[2],
name = "",
labels = spawn.lab.curr
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_SOcurrent.png"))
}
if (plot.figs[4] == 1) {
# RE plots
Dev.quants.ggplot.Dep <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[3])
ggplot(Dev.quants.ggplot.Dep, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[3], ymax = CI_DQs_RE[3]), fill = NA, color = four.colors[3]) +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.Dep$Model_name)) +
# scale_y_continuous(limits=ylims.in[7:8])+
coord_cartesian(ylim = ylims.in[7:8]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
labs(x = " ", y = "Relative change") +
scale_colour_manual(
values = four.colors[3],
name = "",
labels = spawn.lab.ratio
) +
annotate("text", x = c((model.summaries$n + 2), (model.summaries$n + 2)), y = c(TRP + 0.03, LRP - 0.03), label = c("TRP", "LRP"), size = c(3, 3), color = c("darkgreen", "darkred")) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_hline(yintercept = c(TRP, LRP, 0), lty = c(3, 3, 1), lwd = c(0.5, 0.5, 0.5), color = c("darkgreen", "darkred", "gray")) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_status.png"))
# Log plots
Dev.quants.ggplot.Dep <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[3])
ggplot(Dev.quants.ggplot.Dep, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[3], ymax = logCI_DQs_RE[3]), fill = NA, color = four.colors[3]) +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.Dep$Model_name)) +
# scale_y_continuous(limits=ylims.in[7:8])+
coord_cartesian(ylim = ylims.in[7:8]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
labs(x = " ", y = "Relative change") +
scale_colour_manual(
values = four.colors[3],
name = "",
labels = spawn.lab.ratio
) +
annotate("text", x = c((model.summaries$n + 2), (model.summaries$n + 2)), y = c(logTRP + 0.03, logLRP - 0.03), label = c("TRP", "LRP"), size = c(3, 3), color = c("darkgreen", "darkred")) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_hline(yintercept = c(logTRP, logLRP, 0), lty = c(3, 3, 1), lwd = c(0.5, 0.5, 0.5), color = c("darkgreen", "darkred", "gray")) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_status.png"))
}
if (plot.figs[5] == 1) {
# RE plots
Dev.quants.ggplot.MSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[4])
ggplot(Dev.quants.ggplot.MSY, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[4], ymax = CI_DQs_RE[4]), fill = NA, color = four.colors[4]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.MSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[9:10])+
coord_cartesian(ylim = ylims.in[9:10]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[4],
name = "",
labels = yield.lab
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_MSY.png"))
# Log plots
Dev.quants.ggplot.MSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[4])
ggplot(Dev.quants.ggplot.MSY, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[4], ymax = logCI_DQs_RE[4]), fill = NA, color = four.colors[4]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.MSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[9:10])+
coord_cartesian(ylim = ylims.in[9:10]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[4],
name = "",
labels = yield.lab
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_MSY.png"))
}
if (plot.figs[6] == 1) {
# RE plots
Dev.quants.ggplot.FMSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[5])
ggplot(Dev.quants.ggplot.FMSY, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[5], ymax = CI_DQs_RE[5]), fill = NA, color = four.colors[5]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.FMSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[11:12])+
coord_cartesian(ylim = ylims.in[11:12]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[5],
name = "",
labels = F.lab
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_FMSY.png"))
# RE plots
Dev.quants.ggplot.FMSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[5])
ggplot(Dev.quants.ggplot.FMSY, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[5], ymax = logCI_DQs_RE[5]), fill = NA, color = four.colors[5]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.FMSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[11:12])+
coord_cartesian(ylim = ylims.in[11:12]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[5],
name = "",
labels = F.lab
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_FMSY.png"))
}
}
runApp('Github/SS-DL-tool')
library(kableExtra)
out<-read.csv("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Sensitivities/Data/Sensitivity Comparison Plots/Data_sensis_LO/Likes_parms_devquants_table.csv")
t = table_format(x = out[,-1],
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Label","Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/squarespot_rockfish_2021/write_up/tex_tables/data_sensis.tex"))
library(sa4ss)
library(kableExtra)
out<-read.csv("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Sensitivities/Data/Sensitivity Comparison Plots/Data_sensis_LO/Likes_parms_devquants_table.csv")
t = table_format(x = out[,-1],
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Label","Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
t = table_format(x = out[,-1],
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
t = table_format(x = out,
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/squarespot_rockfish_2021/write_up/tex_tables/data_sensis.tex"))
?add_figure
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
tinytex::tlmgr_install(pkgs="glossaries-english")
library(sa4ss)
tinytex::tlmgr_install(pkgs="glossaries-english")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("r4ss/r4ss")
remotes::install_github("r4ss/r4ss")
library(r4ss)
x<-SS_output(C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Forecasts/Reference Model_Pstar45)
x<-SS_output("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Forecasts/Reference Model_Pstar45")
SSexecutivesummary(Model.output)
SSexecutivesummary(x)
library(r4ss)
x<-SS_output("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Forecasts/Reference Model_Pstar45")
SSexecutivesummary(x)
SSexecutivesummary(x)
shiny::runApp('Github/SS-DL-tool')
tinytex::tlmgr(c('install, '--file', shQuote('float.zip'))
libarry(FishLife)
libary(FishLife)
library(FishLife)
Plot_taxa( Search_species(Genus="Eutropiichthys",Species="vacha")$match_taxonomy )
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
install.packages("pdfpages")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$use_forecastnew
!input$use_forecastnew
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("r4ss/r4ss")
install.packages(c("bslib", "cachem", "caret", "DEoptimR", "e1071", "fansi", "fields", "fitdistrplus", "flextable", "forecast", "formatR", "hms", "htmlTable", "inline", "lme4", "manipulateWidget", "Matrix", "matrixStats", "mgcv", "RcppArmadillo", "remotes", "robustbase", "rsconnect", "rversions", "sandwich", "shape", "stringi", "tibble", "tinytex", "xfun", "zip"))
shiny::runApp('Github/SS-DL-tool')
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
SS_plots
debug(SS_plots)
x<-SS_output("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario 1",covar=FALSE)
SS_plots(x)
SS_plots(x)
debugonce(SSplotSelex)
SS_plots(x)
SS_plots(x)
debug(SSplotsSelex)
SS_plots(x)
SS_plots(x)
debugonce(SSplotsSelex)
debugonce(SSplotSelex)
agefactors
ageselex
SS_plots(x)
debugonce(SSplotSelex)
"Asel" %in% agefactors
all(ageselex[ageselex[["Factor"]] ==
"Asel"
, paste(replist[["agebins"]])] == 1)
ageselex[["Factor"]]
ageselex[["Factor"]] ==
"Asel"
paste(replist[["agebins"]])] == 1
paste(replist[["agebins"]])] == 1)
replist
replist$agebins
paste(replist[["agebins"]])]
replist[["agebins"]]
all(ageselex[ageselex[["Factor"]] ==
"Asel", paste(replist[["agebins"]])]
)
shiny::runApp('Github/SS-DL-tool')
Q
shiny::runApp('Github/SS-DL-tool')
data.file$ageerror
Nages()
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Njitter
input$Njitter
paste0("Scenarios/",input$Scenario_name)
getwd()
input$jitter_fraction
input$use_controlnew
input$Njitter
input$jitter_fraction
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(profile_plot)
shiny::runApp('Github/SS-DL-tool')
profilesummary$likelihoods
-lab.row
max(apply(profilesummary$likelihoods[-1, -lab.row],
1, max) - apply(profilesummary$likelihoods[-1, -lab.row],
1, min))
Q
debugonce(PinerPlot)
debugonce(PinerPlot)
library(r4ss)
debugonce(PinerPlot)
shiny::runApp('Github/SS-DL-tool')
debugonce(PinerPlot)
runApp('Github/SS-DL-tool')
prof.table[, icol] - min(prof.table[subset,
icol], na.rm = TRUE)
Q
debugonce(PinerPlot)
runApp('Github/SS-DL-tool')
max
prof.table[, -c(1:3)]
apply(prof.table[, -c(1:3)], 2, max, na.rm = TRUE)
?apply
prof.table
prof.table[, -c(1:3)]
t(prof.table[, -c(1:3)])
apply(prof.table[, -c(1:2)], 2, max, na.rm = TRUE)
max(prof.table[, 3], na.rm = TRUE)
data.frame(prof.table[, -c(1:3)])
apply(date.frame(prof.table[, -c(1:3)]), 2, max, na.rm = TRUE)
apply(data.frame(prof.table[, -c(1:3)]), 2, max, na.rm = TRUE)
class(apply(data.frame(prof.table[, -c(1:3)]), 2, max, na.rm = TRUE))
remotes::install_github("r4ss/r4ss")
library(r4ss)
PinerPlot
remotes::install_github("r4ss/r4ss")
install.packages(c("corrplot", "devtools", "FSA", "gtools", "Matrix", "matrixStats", "mgcv", "mvtnorm", "plotly", "proxy", "quantreg", "remotes", "rfishbase", "robustbase", "rversions", "sf", "stringi", "tinytex", "units", "zip"))
remotes::install_github("r4ss/r4ss")
library(PinerPlot)
library(r4ss)
PinerPlot
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/Natural-Mortality-Tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
#detach("package:sa4ss", unload = TRUE)
#remotes::install_github("nwfsc-assess/sa4ss")
#devtools::load_all("C:/Users/Chantel.Wetzel/Documents/GitHub/r4ss")
library(sa4ss)
library(r4ss)
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/WA/write-up")
base_name = "Reference model"
mod_loc = file.path(
"C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/OR/write_up/models",
base_name)
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
